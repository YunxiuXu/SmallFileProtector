# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets
import time
import win32ui
import hashlib
import time
import shutil
import keyboard
import os
import sys
#        self.label.setGraphicsEffect(QtWidgets.QGraphicsDropShadowEffect(blurRadius=25, xOffset=0, yOffset=0))
#MainWindow.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.FramelessWindowHint)
#        MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground)
filePath = r""
saveDisk = "D"#保存盘符
alertMins = 10
with open("设置.txt", "r", encoding='utf-8') as f:  # 打开文件
    data = f.readlines()  # 读取设置文件
    saveDisk = data[0]#
    alertMins = int(data[1])

def md5(fname):
    hash_md5 = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

def SaveNewCopy(filePath):
    global pathText, saveFilePath, justSavedFlag
    justSavedFlag = 1
    source = filePath
    #target = './saves/' + time.strftime(' %H.%M.%S_%m.%d') + filePath.split('\\')[-1]
    target = saveFilePath + "/" + time.strftime(' %H.%M.%S_%m.%d_') + filePath.split('\\')[-1]
    shutil.copy(source, target)
    print(source)
    #pathText.set("保护中:" + filePath)
#

def selectProtectedFile():
    global filePath
    dlg = win32ui.CreateFileDialog(1)  # 参数 1 表示打开文件对话框
    dlg.SetOFNInitialDir('xxxxxxxxx')  # 设置打开文件对话框中的初始显示目录
    dlg.DoModal()
    filePath = dlg.GetPathName()  # 返回选择的文件路径和名称
    filePath.replace('/', '\/')

def openBackupFolder():#打开备份文件夹
    global saveFilePath
    os.system("explorer.exe %s" % saveFilePath)

count = 0
startTime = time.time()
lastCtrlSTime = time.time()#存放上次按保存的时间
noCtrlSSecond = 0

saveFilePath = saveDisk[0] + ":\\文件防丢小助手备份\\"#还得去掉\n
isExists = os.path.exists(saveFilePath)#判断是否存在文件夹
if not isExists:
    os.makedirs(saveFilePath)

selectProtectedFile()
SaveNewCopy(filePath)
print(md5(filePath))
lastmd5 = md5(filePath)
justSavedFlag = 0#刚才有新保存发生的标志


class Ui_MainWindow(object):
    def LockButton(self):#锁头按钮 点击后打开存储目录
        global saveFilePath
        os.system("explorer.exe %s" % saveFilePath)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(293, 240)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        pointsize = font.pointSize()
        font.setPixelSize(pointsize * 90 / 72)
        MainWindow.setFont(font)
        MainWindow.setAnimated(True)
        MainWindow.setDocumentMode(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        MainWindow.setDockNestingEnabled(False)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 50, 271, 151))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("images/bg.png"))
        self.label_4.setScaledContents(True)
        self.label_4.setObjectName("label_4")
        self.importantFileLab = QtWidgets.QLabel(self.centralwidget)
        self.importantFileLab.setGeometry(QtCore.QRect(100, 80, 151, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.importantFileLab.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        pointsize = font.pointSize()
        font.setPixelSize(pointsize * 90 / 72)
        self.importantFileLab.setFont(font)
        self.importantFileLab.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.importantFileLab.setTextFormat(QtCore.Qt.RichText)
        self.importantFileLab.setAlignment(QtCore.Qt.AlignCenter)
        self.importantFileLab.setObjectName("importantFileLab")
        self.CtrlsButton = QtWidgets.QLabel(self.centralwidget)
        self.CtrlsButton.setGeometry(QtCore.QRect(80, 20, 141, 65))
        self.CtrlsButton.setText("")
        self.CtrlsButton.setPixmap(QtGui.QPixmap("images/keyboard.png"))
        self.CtrlsButton.setScaledContents(True)
        self.CtrlsButton.setObjectName("CtrlsButton")
        self.Number_3 = QtWidgets.QLabel(self.centralwidget)
        self.Number_3.setGeometry(QtCore.QRect(100, 80, 91, 91))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.Number_3.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        pointsize = font.pointSize()
        font.setPixelSize(pointsize * 90 / 72)
        self.Number_3.setFont(font)
        self.Number_3.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Number_3.setTextFormat(QtCore.Qt.RichText)
        self.Number_3.setAlignment(QtCore.Qt.AlignCenter)
        self.Number_3.setObjectName("Number_3")
        self.nMinsBefore = QtWidgets.QLabel(self.centralwidget)
        self.nMinsBefore.setGeometry(QtCore.QRect(190, 80, 61, 91))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.nMinsBefore.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        pointsize = font.pointSize()
        font.setPixelSize(pointsize * 90 / 72)
        self.nMinsBefore.setFont(font)
        self.nMinsBefore.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.nMinsBefore.setTextFormat(QtCore.Qt.RichText)
        self.nMinsBefore.setAlignment(QtCore.Qt.AlignCenter)
        self.nMinsBefore.setObjectName("nMinsBefore")
        self.path = QtWidgets.QLabel(self.centralwidget)
        self.path.setGeometry(QtCore.QRect(40, 140, 221, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.path.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        pointsize = font.pointSize()
        font.setPixelSize(pointsize * 90 / 72)
        self.path.setFont(font)
        self.path.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.path.setTextFormat(QtCore.Qt.RichText)
        self.path.setAlignment(QtCore.Qt.AlignTop)
        self.path.setWordWrap(True)
        self.path.setObjectName("path")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(56, 89, 31, 41))
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setStyleSheet("background: rgba(0, 0, 0, 0);")
        self.pushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/lock.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(40, 40))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.LockButton)#锁头按钮事件
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.FramelessWindowHint)
        MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.label_4.setGraphicsEffect(QtWidgets.QGraphicsDropShadowEffect(blurRadius=25, xOffset=0, yOffset=0))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.importantFileLab.setText(_translate("MainWindow", "重要文件保护中"))
        self.Number_3.setText(_translate("MainWindow", "上次Ctrl+s:"))
        self.nMinsBefore.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#FFFFFF;\">5分钟前</span></p></body></html>"))



class Thread_1(QtCore.QThread,  Ui_MainWindow):  # 线程1
    def __init__(self):
        super().__init__()

    def run(self):
        while 1:
            global count, startTime, lastmd5, lastCtrlSTime, noCtrlSSecond, noCtrlSText, filePath
            count += 1
            time.sleep(0.01)#防止占满CPU
            if (keyboard.is_pressed("ctrl+s")):  # 按了ctrl s 世界清静了
                lastCtrlSTime = time.time()
                noCtrlSSecond = 0
                print("ctrls")
            if (time.time() - startTime > 2):
                startTime = time.time()
                count = 0
                try:
                    tmpMd5 = md5(filePath)
                    if (tmpMd5 != lastmd5):
                        lastmd5 = tmpMd5
                        SaveNewCopy(filePath)
                        #self.pushButton.setStyleSheet("background: rgba(0, 255, 0, 0);")#保存的时候把锁头变绿
                except:
                    print("readMd5Failed")

                noCtrlSSecond = int(time.time() - lastCtrlSTime)
                if (noCtrlSSecond % 60 == 0):
                    print("你已经" + str(noCtrlSSecond / 60) + "分钟没点Ctrl+S了")
                    # noCtrlSText.set("你已经" + str(noCtrlSSecond / 1) + "分钟没点Ctrl+S了")



class MyWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MyWindow, self).__init__()
        self.thread = Thread_1()
        self.thread.start()
        self.setupUi(self)

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.offset = event.pos()
        else:
            super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        if self.offset is not None and event.buttons() == QtCore.Qt.LeftButton:
            self.move(self.pos() + event.pos() - self.offset)
        else:
            super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):
        self.offset = None
        super().mouseReleaseEvent(event)


if __name__ == "__main__":

    QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)  # enable highdpi scaling
    QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)  # use highdpi icons

    app = QtWidgets.QApplication(sys.argv)
    myshow = MyWindow()
    myshow.show()
    myshow.CtrlsButton.setVisible(False)
    CtrlSButtonIconState = 0#ctrls按钮的显示状态 为了blink
    def update_label():#更新QT部件在这里
        global CtrlSButtonIconState, noCtrlSSecond, justSavedFlag, alertMins
        myshow.path.setText(filePath)
        myshow.nMinsBefore.setText(str(int(noCtrlSSecond / 60)) + "分钟前")
        myshow.pushButton.setStyleSheet("background: rgba(0, 0, 0, 0);")#锁头变回正常颜色
        if(justSavedFlag == 1):
            justSavedFlag = 0
            myshow.pushButton.setStyleSheet("background: rgba(0, 255, 0, 128);")  # 锁头变回正常颜色
        #print(alertMins)
        if(noCtrlSSecond / 60 > alertMins):
            myshow.nMinsBefore.setStyleSheet("color:red")
            if(CtrlSButtonIconState == 0):
                myshow.CtrlsButton.setVisible(True)
                CtrlSButtonIconState = 1
            else:
                CtrlSButtonIconState = 0
                myshow.CtrlsButton.setVisible(False)
        else:
            myshow.CtrlsButton.setVisible(False)
            myshow.nMinsBefore.setStyleSheet("color:white")
    timer = QtCore.QTimer()
    timer.timeout.connect(update_label)
    timer.start(1000)  # every 10,000 milliseconds

    sys.exit(app.exec_())
